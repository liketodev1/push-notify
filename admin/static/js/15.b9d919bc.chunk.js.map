{"version":3,"sources":["modules/auth/Signup/SignupJwtAuth.tsx","modules/auth/Signup/index.tsx"],"names":["useStyles","makeStyles","theme","formRoot","textAlign","myTextFieldRoot","width","checkboxRoot","marginLeft","pointer","cursor","btnRoot","borderRadius","overrides","MuiCard","root","fontWeight","Fonts","LIGHT","fontSize","textTransform","btnRootFull","dividerRoot","marginBottom","marginRight","breakpoints","up","textPrimary","color","palette","text","primary","colorTextPrimary","main","underlineNone","textDecoration","textGrey","grey","MyTextField","props","useField","field","meta","errorText","error","touched","TextField","helperText","SignupFirebase","dispatch","useDispatch","messages","useIntl","validationSchema","yup","name","required","email","password","confirmPassword","classes","Box","flex","display","flexDirection","px","xs","sm","xl","pt","validateOnChange","initialValues","onSubmit","data","setErrors","setSubmitting","onJwtUserSignUp","isSubmitting","className","noValidate","autoComplete","mb","label","IntlMessages","id","variant","Grid","item","md","type","alignItems","Checkbox","component","mr","justifyContent","Button","disabled","ml","mt","to","clsx","bgcolor","py","InfoView","imgRoot","cardRoot","maxWidth","overflow","boxShadow","position","paddingTop","content","left","right","top","height","borderBottomRightRadius","borderBottomLeftRadius","backgroundColor","textUppercase","Signup","src","alt","Card","REGULAR","SignupJwtAuth"],"mappings":"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","file":"static/js/15.b9d919bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Checkbox} from '@material-ui/core';\r\nimport {Form, Formik, useField} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport InfoView from '@crema/core/InfoView';\r\nimport {onJwtUserSignUp} from '../../../redux/actions';\r\nimport {Link} from 'react-router-dom';\r\nimport Box from '@material-ui/core/Box';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {GridContainer} from '../../../@crema';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport {CremaTheme} from '../../../types/AppContextPropsType';\r\nimport {useIntl} from 'react-intl';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  formRoot: {\r\n    textAlign: 'left',\r\n  },\r\n  myTextFieldRoot: {\r\n    width: '100%',\r\n  },\r\n  checkboxRoot: {\r\n    marginLeft: -12,\r\n  },\r\n  pointer: {\r\n    cursor: 'pointer',\r\n  },\r\n  btnRoot: {\r\n    borderRadius: theme.overrides.MuiCard.root.borderRadius,\r\n    width: '10rem',\r\n    fontWeight: Fonts.LIGHT,\r\n    fontSize: 16,\r\n    textTransform: 'capitalize',\r\n  },\r\n  btnRootFull: {\r\n    width: '100%',\r\n  },\r\n  dividerRoot: {\r\n    marginBottom: 10,\r\n    marginLeft: -48,\r\n    marginRight: -48,\r\n    [theme.breakpoints.up('xl')]: {\r\n      marginBottom: 20,\r\n    },\r\n  },\r\n  textPrimary: {\r\n    color: theme.palette.text.primary,\r\n  },\r\n  colorTextPrimary: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n  underlineNone: {\r\n    textDecoration: 'none',\r\n  },\r\n  textGrey: {\r\n    color: theme.palette.grey[500],\r\n  },\r\n}));\r\n\r\nconst MyTextField = (props: any) => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : '';\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      {...field}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\nconst SignupFirebase: React.FC<{}> = () => {\r\n  const dispatch = useDispatch();\r\n  const {messages} = useIntl();\r\n  const validationSchema = yup.object({\r\n    name: yup.string().required(messages['validation.nameRequired'] as string),\r\n    email: yup\r\n      .string()\r\n      .email(messages['validation.emailFormat'] as string)\r\n      .required(messages['validation.emailRequired'] as string),\r\n    password: yup\r\n      .string()\r\n      .required(messages['validation.passwordRequired'] as string),\r\n    confirmPassword: yup\r\n      .string()\r\n      .required(messages['validation.reTypePassword'] as string),\r\n  });\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Box flex={1} display='flex' flexDirection='column'>\r\n      <Box\r\n        px={{xs: 6, sm: 10, xl: 15}}\r\n        pt={8}\r\n        flex={1}\r\n        display='flex'\r\n        flexDirection='column'>\r\n        <Formik\r\n          validateOnChange={true}\r\n          initialValues={{\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={(data, {setErrors, setSubmitting}) => {\r\n            if (data.password !== data.confirmPassword) {\r\n              setErrors({\r\n                confirmPassword: messages[\r\n                  'validation.passwordMisMatch'\r\n                ] as string,\r\n              });\r\n            } else {\r\n              setSubmitting(true);\r\n              dispatch(\r\n                onJwtUserSignUp({\r\n                  email: data.email,\r\n                  password: data.password,\r\n                  name: data.name,\r\n                }),\r\n              );\r\n              setSubmitting(false);\r\n            }\r\n          }}>\r\n          {({isSubmitting}) => (\r\n            <Form className={classes.formRoot} noValidate autoComplete='off'>\r\n              <Box mb={{xs: 5, xl: 8}}>\r\n                <MyTextField\r\n                  label={<IntlMessages id='common.name' />}\r\n                  name='name'\r\n                  variant='outlined'\r\n                  className={classes.myTextFieldRoot}\r\n                />\r\n              </Box>\r\n\r\n              <Box mb={{xs: 5, xl: 8}}>\r\n                <MyTextField\r\n                  label={<IntlMessages id='common.email' />}\r\n                  name='email'\r\n                  variant='outlined'\r\n                  className={classes.myTextFieldRoot}\r\n                />\r\n              </Box>\r\n\r\n              <GridContainer>\r\n                <Grid item xs={12} md={6}>\r\n                  <Box mb={{xs: 0, xl: 4}}>\r\n                    <MyTextField\r\n                      label={<IntlMessages id='common.password' />}\r\n                      name='password'\r\n                      type='password'\r\n                      variant='outlined'\r\n                      className={classes.myTextFieldRoot}\r\n                    />\r\n                  </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={6}>\r\n                  <Box mb={{xs: 3, xl: 4}}>\r\n                    <MyTextField\r\n                      label={<IntlMessages id='common.retypePassword' />}\r\n                      name='confirmPassword'\r\n                      type='password'\r\n                      variant='outlined'\r\n                      className={classes.myTextFieldRoot}\r\n                    />\r\n                  </Box>\r\n                </Grid>\r\n              </GridContainer>\r\n\r\n              <Box\r\n                mb={{xs: 3, xl: 4}}\r\n                display='flex'\r\n                alignItems='center'\r\n                fontSize={15}>\r\n                <Box display='flex' alignItems='center'>\r\n                  <Checkbox className={classes.checkboxRoot} />\r\n                  <Box\r\n                    className={classes.textGrey}\r\n                    component='span'\r\n                    mr={2}\r\n                    fontSize={15}>\r\n                    <IntlMessages id='common.iAgreeTo' />\r\n                  </Box>\r\n                </Box>\r\n                <Box\r\n                  color='primary.main'\r\n                  component='span'\r\n                  fontSize={15}\r\n                  className={classes.pointer}>\r\n                  <IntlMessages id='common.termConditions' />\r\n                </Box>\r\n              </Box>\r\n\r\n              <Box\r\n                mb={6}\r\n                display='flex'\r\n                flexDirection={{xs: 'column', sm: 'row'}}\r\n                alignItems={{sm: 'center'}}\r\n                justifyContent={{sm: 'space-between'}}>\r\n                <Button\r\n                  variant='contained'\r\n                  color='secondary'\r\n                  disabled={isSubmitting}\r\n                  className={classes.btnRoot}\r\n                  type='submit'>\r\n                  <IntlMessages id='common.signup' />\r\n                </Button>\r\n\r\n                <Box\r\n                  ml={{sm: 4}}\r\n                  mt={{xs: 3, sm: 0}}\r\n                  color='text.secondary'\r\n                  fontSize={15}>\r\n                  <Box className={classes.textGrey} component='span' mr={1}>\r\n                    <IntlMessages id='common.alreadyHaveAccount' />\r\n                  </Box>\r\n                  <Box component='span'>\r\n                    <Link\r\n                      to='/signin'\r\n                      className={clsx(\r\n                        classes.underlineNone,\r\n                        classes.colorTextPrimary,\r\n                      )}>\r\n                      <IntlMessages id='common.signIn' />\r\n                    </Link>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n\r\n      <Box\r\n        bgcolor={grey[100]}\r\n        px={{xs: 6, sm: 10, xl: 15}}\r\n        py={{xs: 3, xl: 4}}\r\n        display='flex'\r\n        justifyContent='center'\r\n        alignItems='center'>\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          type='submit'\r\n          className={clsx(classes.btnRoot, classes.btnRootFull)}>\r\n          <IntlMessages id='auth.signupWithJwt' />\r\n        </Button>\r\n      </Box>\r\n\r\n      <InfoView />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SignupFirebase;\r\n","import React from 'react';\r\nimport SignupJwtAuth from './SignupJwtAuth';\r\nimport Card from '@material-ui/core/Card';\r\nimport Box from '@material-ui/core/Box';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  imgRoot: {\r\n    cursor: 'pointer',\r\n    display: 'inline-block',\r\n    width: 140,\r\n  },\r\n  cardRoot: {\r\n    maxWidth: '36rem',\r\n    width: '100%',\r\n    overflow: 'hidden',\r\n    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',\r\n    textAlign: 'center',\r\n    position: 'relative',\r\n    paddingTop: 20,\r\n    [theme.breakpoints.up('xl')]: {\r\n      paddingTop: 32,\r\n    },\r\n    '&:before': {\r\n      content: \"''\",\r\n      position: 'absolute',\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      width: 130,\r\n      height: 9,\r\n      borderBottomRightRadius: 80,\r\n      borderBottomLeftRadius: 80,\r\n      marginRight: 'auto',\r\n      marginLeft: 'auto',\r\n      backgroundColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  textUppercase: {\r\n    textTransform: 'uppercase',\r\n  },\r\n}));\r\nconst Signup: React.FC<{}> = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box flex={1} display='flex' flexDirection='column' justifyContent='center'>\r\n      <Box mb={{xs: 6, md: 8, xl: 18}} textAlign='center'>\r\n        <img\r\n          className={classes.imgRoot}\r\n          src={'/assets/images/logo-white-with-name.png'}\r\n          alt='crema-logo'\r\n        />\r\n      </Box>\r\n\r\n      <Box\r\n        display='flex'\r\n        flexDirection='column'\r\n        justifyContent='center'\r\n        alignItems='center'>\r\n        <Card className={classes.cardRoot}>\r\n          <Box px={{xs: 6, sm: 10, xl: 15}}>\r\n            <Box\r\n              component='h2'\r\n              mb={{xs: 3, xl: 6}}\r\n              color='text.primary'\r\n              fontWeight={Fonts.REGULAR}\r\n              fontSize={{xs: 24, xl: 26}}>\r\n              <IntlMessages id='common.signup' />\r\n            </Box>\r\n          </Box>\r\n          <SignupJwtAuth />\r\n        </Card>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"sourceRoot":""}