{"version":3,"sources":["shared/components/UserSummary/index.tsx","shared/components/UserView/StateCards/StatGraphs.tsx","shared/components/UserView/StateCards/index.tsx","shared/components/UserView/index.tsx","modules/pages/UserControlPanel.tsx","@crema/core/AppCard/index.tsx","@crema/core/AppTableContainer/index.tsx"],"names":["UserSummary","userData","AppAnimate","animation","delay","AppCard","title","Box","fontSize","fontWeight","Fonts","BOLD","rootStyle","height","display","justifyContent","MEDIUM","mt","mb","color","user_no","ip","countries","country","name","fromNow","createdAt","StatGraphs","data","strokeColor","width","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","labelStyle","type","dataKey","stroke","strokeWidth","fillOpacity","fill","StateCard","classes","makeStyles","icon","marginLeft","marginRight","marginTop","statGraphs","useStyles","flex","flexDirection","position","mr","xs","xl","component","value","IconButton","className","alt","src","graphData","theme","statsCard","borderRadius","overrides","MuiCardLg","root","spacing","inputs","table","flexWrap","row","col","flexBasis","textAlign","lineHeight","formControl","minWidth","buttons","message","alignItems","ColorlibConnector","withStyles","alternativeLabel","active","backgroundImage","completed","line","border","backgroundColor","StepConnector","useColorlibStepIconStyles","zIndex","boxShadow","ColorlibStepIcon","props","icons","clsx","undefined","UserView","clientDomain","dispatch","useDispatch","activeStep","parseInt","status","steps","onCopyHandler","_text","_result","store","addNotification","container","password","atob","e","console","log","AppTableContainer","Stepper","connector","map","label","Step","StepLabel","StepIconComponent","Grid","item","md","balance","JSON","parse","wallet","getSymbolFromCurrency","info","symbol_local","code","final_balance","conversion","toFixed","getLocalBalance","growth","Button","variant","isOffline","Fab","size","onClick","window","open","uid","openDashboard","onSetPin","onBlockUser","blocked","TextField","disabled","fullWidth","InputProps","endAdornment","InputAdornment","text","onCopy","result","edge","UserControlPanel","useParams","useEffect","onGetUserData","useSelector","users","user","link","textTruncate","overflow","textOverflow","whiteSpace","cardHeader","paddingLeft","paddingRight","paddingBottom","titleStyle","headerStyle","contentStyle","action","actionStyle","footer","bgcolor","footerPosition","footerStyle","children","rest","clone","style","React","isValidElement","alignSelf","ml","href","underline","background","tableResponsiveMaterial","minHeight","overflowX","marginBottom","overflowY","grey"],"mappings":"6VAsEeA,EAxD8B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAE9C,OACE,cAACC,EAAA,EAAD,CAAYC,UAAU,uBAAuBC,MAAO,IAApD,SACE,eAACC,EAAA,EAAD,CACEC,MACE,cAACC,EAAA,EAAD,CAAKC,SAAU,GAAIC,WAAYC,IAAMC,KAArC,0BAIFC,UAAW,CAAEC,OAAQ,QANvB,UAQE,eAACN,EAAA,EAAD,CACEO,QAAQ,OACRC,eAAe,gBACfP,SAAU,GACVC,WAAYC,IAAMM,OAClBC,GAAI,EACJC,GAAI,EANN,UAOE,cAACX,EAAA,EAAD,CAAKY,MAAM,iBAAX,uBACA,cAACZ,EAAA,EAAD,UAAMN,EAASmB,aAEjB,eAACb,EAAA,EAAD,CACEO,QAAQ,OACRC,eAAe,gBACfP,SAAU,GACVC,WAAYC,IAAMM,OAClBE,GAAI,EALN,UAME,cAACX,EAAA,EAAD,CAAKY,MAAM,iBAAX,uBACA,cAACZ,EAAA,EAAD,UAAMN,EAASoB,QAEjB,eAACd,EAAA,EAAD,CACEO,QAAQ,OACRC,eAAe,gBACfP,SAAU,GACVC,WAAYC,IAAMM,OAClBE,GAAI,EALN,UAME,cAACX,EAAA,EAAD,CAAKY,MAAM,iBAAX,uBACA,cAACZ,EAAA,EAAD,UAAMe,YAAUrB,EAASsB,SAAW,IAAIC,UAE1C,eAACjB,EAAA,EAAD,CACEO,QAAQ,OACRC,eAAe,gBACfP,SAAU,GACVC,WAAYC,IAAMM,OAClBE,GAAI,EALN,UAME,cAACX,EAAA,EAAD,CAAKY,MAAM,iBAAX,oBACA,cAACZ,EAAA,EAAD,UACE,cAAC,IAAD,CAAQkB,SAAO,EAAf,SAAiBxB,EAASyB,uB,2FC9BvBC,EAxB+B,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,YACpD,OACE,cAAC,IAAD,CAAqBC,MAAM,OAAOjB,OAAQ,GAA1C,SACE,eAAC,IAAD,CAAWe,KAAMA,EAAMG,OAAQ,CAACC,IAAK,GAAIC,MAAO,EAAGC,KAAM,EAAGC,OAAQ,GAApE,UACE,+BACE,iCAAgBC,GAAG,UAAUC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAArD,UACE,sBAAMC,OAAO,KAAKC,UAAWb,EAAac,YAAa,MACvD,sBAAMF,OAAO,MAAMC,UAAWb,EAAac,YAAa,WAG5D,cAAC,IAAD,CAASC,WAAY,CAACzB,MAAO,WAC7B,cAAC,IAAD,CACE0B,KAAK,WACLC,QAAQ,SACRC,OAAQlB,EACRmB,YAAa,EACbC,YAAa,EACbC,KAAK,wBC0CAC,EArD6B,SAAC,GAAc,IAAZvB,EAAW,EAAXA,KAavCwB,EAZYC,aAAW,iBAAO,CAClCC,KAAM,CACJzC,OAAQ,GACRiB,MAAO,GACPyB,WAAY,OACZC,aAAc,GACdC,WAAY,IAEdC,WAAY,CACV3B,OAAQ,oBAGI4B,GAEhB,OACE,cAACtD,EAAA,EAAD,UACE,eAACE,EAAA,EAAD,CAAKO,QAAQ,OAAO8C,KAAM,EAAGC,cAAc,SAA3C,UACE,eAACtD,EAAA,EAAD,CAAKO,QAAQ,OAAO8C,KAAM,EAAGC,cAAc,MAA3C,UACE,eAACtD,EAAA,EAAD,CAAKuD,SAAS,WAAWC,GAAI,CAAEC,GAAI,EAAGC,GAAI,GAA1C,UACE,cAAC1D,EAAA,EAAD,CAAKW,GAAI,EAAT,SACE,cAACX,EAAA,EAAD,CACE2D,UAAU,KACVpD,QAAQ,eACRL,WAAYC,IAAMC,KAClBH,SAAU,GAJZ,SAKGoB,EAAKuC,UAWV,cAAC5D,EAAA,EAAD,CAAK2D,UAAU,IAAI1D,SAAU,GAAIW,MAAM,iBAAiBD,GAAI,EAA5D,SACGU,EAAKiB,UAGV,cAACuB,EAAA,EAAD,CAAYC,UAAWjB,EAAQE,KAA/B,SACE,qBAAKgB,IAAI,OAAOC,IAAK3C,EAAK0B,YAG9B,cAAC/C,EAAA,EAAD,CAAK8D,UAAWjB,EAAQM,WAAxB,SACE,cAAC,EAAD,CAAY9B,KAAMA,EAAK4C,UAAW3C,YAAaD,EAAKC,sB,+CCjBxD8B,G,OAAYN,aAAW,SAACoB,GAAD,MAAwB,CACjDC,UAAW,CACPC,aAAcF,EAAMG,UAAUC,UAAUC,KAAKH,cAEjD5C,OAAQ,CACJA,OAAQ0C,EAAMM,QAAQ,IAE1BC,OAAQ,CACJlD,MAAO,QAEXmD,MAAO,CACHnE,QAAS,OACToE,SAAU,QAEdC,IAAK,CACDrE,QAAS,QAEbsE,IAAK,CACDxB,KAAM,WACNyB,UAAW,MACXC,UAAW,SACXC,WAAY,QAEhBC,YAAa,CACTzD,OAAQ0C,EAAMM,QAAQ,GACtBU,SAAU,IACV7B,KAAM,GAEV8B,QAAS,CACL9B,KAAM,EACNJ,YAAaiB,EAAMM,QAAQ,IAE/BY,QAAS,CACL7E,QAAS,OACT8E,WAAY,eAIdC,EAAoBC,YAAW,CACjCC,iBAAkB,CACd/D,IAAK,IAETgE,OAAQ,CACJ,UAAW,CACPC,gBACI,uFAGZC,UAAW,CACP,UAAW,CACPD,gBACI,uFAGZE,KAAM,CACFtF,OAAQ,EACRuF,OAAQ,EACRC,gBAAiB,UACjB1B,aAAc,IApBImB,CAsBvBQ,KAEGC,EAA4BlD,YAAW,CACzCyB,KAAM,CACFuB,gBAAiB,OACjBG,OAAQ,EACRrF,MAAO,OACPW,MAAO,GACPjB,OAAQ,GACRC,QAAS,OACT6D,aAAc,MACd5D,eAAgB,SAChB6E,WAAY,UAEhBI,OAAQ,CACJC,gBACI,yFACJQ,UAAW,gCAEfP,UAAW,CACPD,gBACI,4FAIZ,SAASS,EAAiBC,GAAa,IAAD,EAC5BvD,EAAUmD,IACRP,EAAsBW,EAAtBX,OAAQE,EAAcS,EAAdT,UACVU,EAAQ,CACV,EAAG,cAAC,IAAD,IACH,EAAG,cAAC,IAAD,IACH,EAAG,cAAC,IAAD,IACH,EAAG,cAAC,IAAD,KAEP,OACI,qBACIvC,UAAWwC,kBAAKzD,EAAQ0B,MAAT,mBACV1B,EAAQ4C,OAASA,GADP,cAEV5C,EAAQ8C,UAAYA,GAFV,IADnB,SAKoB,IAAfS,EAAMrD,WAA6BwD,IAAfH,EAAMrD,KAAqBsD,EAAM,GAAqB,IAAfD,EAAMrD,KAAasD,EAAM,GAAoB,IAAfD,EAAMrD,KAAasD,EAAM,GAAKA,EAAM,KAQ1I,IA2PeG,EA3P2B,SAAC,GAAgC,IAA9B9G,EAA6B,EAA7BA,SAAU+G,EAAmB,EAAnBA,aAE7CC,EAAWC,cACX9D,EAAUO,IACVwD,EAAaC,SAASnH,EAASoH,QAAU,KACzCC,EARC,CAAC,aAAc,gBAAiB,YAAa,UA8D9CC,EAAgB,SAACC,EAAeC,GAElC,OAAOC,QAAMC,gBAAgB,CACzBrH,MAAO,GACPqF,QAAS,sBACTiC,UAAW,YACX/E,KAAM,aAQVgF,EAAW,GACf,IACIA,EAAWC,KAAK7H,EAAS4H,UAC3B,MAAOE,GACLC,QAAQC,IAAIF,GAEhB,OACI,eAACG,EAAA,EAAD,WACI,cAAC,IAAD,IACA,cAAC3H,EAAA,EAAD,CAAK8D,UAAWjB,EAAQrB,OAAxB,SACI,cAACoG,EAAA,EAAD,CACIpC,kBAAgB,EAChBoB,WAAYA,EACZiB,UAAW,cAACvC,EAAD,IAHf,SAIKyB,EAAMe,KAAI,SAACC,GAAD,OACP,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAWC,kBAAmB/B,EAA9B,SAAiD4B,KAD1CA,UAMvB,cAAC/H,EAAA,EAAD,CAAK8D,UAAWjB,EAAQrB,OAAxB,SAEqB,OAAb9B,EAAoB,6BAChB,mCACI,eAAC,IAAD,WACI,cAACyI,EAAA,EAAD,CAAMC,MAAI,EAAC3E,GAAI,GAAI4E,GAAI,EAAvB,SACI,cAAC,EAAD,CAAa3I,SAAUA,MAE3B,eAACyI,EAAA,EAAD,CAAMC,MAAI,EAAC3E,GAAI,GAAI4E,GAAI,EAAvB,UACI,cAAC,EAAD,CAAWhH,KACP,CACIQ,GAAI,EACJS,KAAM,gBACNsB,MAtEhB,WACpB,IACI,IAAM0E,EAAUC,KAAKC,MAAM9I,EAAS4I,SACpC,GAAIA,EAAQG,OACR,OAAOC,IAAsBJ,EAAQK,KAAKC,aAAaC,MAAQ,KAAOP,EAAQG,OAAOK,cAAgBR,EAAQK,KAAKC,aAAaG,YAAYC,QAAQ,GAEzJ,MAAOxB,GACL,MAAO,KA+DgCyB,IAAqB,IAC5BC,OAAQ,EACRnG,KAAM,gCACNzB,YAAa,GACb2C,UAAW,MAGnB,cAACnE,EAAA,EAAD,UACI,eAACE,EAAA,EAAD,CAAKO,QAAQ,OAAO8C,KAAM,EAAGC,cAAc,SAA3C,UACI,cAACtD,EAAA,EAAD,CAAKO,QAAQ,OAAO8C,KAAM,EAAGC,cAAc,MAA3C,SACI,cAACtD,EAAA,EAAD,CAAKuD,SAAS,WAAWC,GAAI,CAAEC,GAAI,EAAGC,GAAI,GAA1C,SACI,cAAC1D,EAAA,EAAD,CAAKW,GAAI,EAAT,SACI,cAACX,EAAA,EAAD,CACI2D,UAAU,KACVpD,QAAQ,eACRL,WAAYC,IAAMC,KAClBH,SAAU,GAJd,0BAUZ,cAACD,EAAA,EAAD,UACI,cAACmJ,EAAA,EAAD,CAAQC,QAAQ,WAAWxI,MAAM,YAAjC,SACKlB,EAAS2J,UAAY,UAAY,qBAMtD,cAAClB,EAAA,EAAD,CAAMC,MAAI,EAAC3E,GAAI,GAAI4E,GAAI,EAAvB,SACI,cAACrI,EAAA,EAAD,CAAK8D,UAAWjB,EAAQrB,OAAxB,SACI,eAACxB,EAAA,EAAD,WACI,cAACsJ,EAAA,EAAD,CACIF,QAAQ,WACRG,KAAK,SACL3I,MAAM,UACN,aAAW,MACXkD,UAAWjB,EAAQrB,OACnBgI,QAAS,SAAChC,GAAD,OA3I/B,WAClB,IAAIF,EAAW,GACf,IACIA,EAAWC,KAAK7H,EAAS4H,UAC3B,MAAOE,IAGTiC,OAAOC,KAAKjD,EAAe,QAAU/G,EAASiK,IAAM,QAAUrC,GAoINsC,IANpB,4BAUA,cAACN,EAAA,EAAD,CACIF,QAAQ,WACRG,KAAK,SACL3I,MAAM,UACN,aAAW,MACXkD,UAAWjB,EAAQrB,OACnBgI,QAAS,SAAChC,GAAD,OAhIjDd,EAASmD,YAASnK,EAASiK,MACpBxC,QAAMC,gBAAgB,CACzBrH,MAAO,GACPqF,QAAS,sBACTiC,UAAW,YACX/E,KAAM,UAqH0B,sBAUA,cAACgH,EAAA,EAAD,CACIF,QAAQ,WACRG,KAAK,SACL3I,MAAM,UACN,aAAW,MACXkD,UAAWjB,EAAQrB,OACnBgI,QAAS,kBApJjD9C,EAASoD,YAAYpK,EAASiK,KAAMjK,EAASqK,UACtC5C,QAAMC,gBAAgB,CACzBrH,MAAO,GACPqF,QAAS,uBACTiC,UAAW,YACX/E,KAAM,YAyI0B,iCAiBhC,cAACtC,EAAA,EAAD,CAAK8D,UAAWjB,EAAQrB,OAAxB,SACI,eAAC,IAAD,WACI,cAAC2G,EAAA,EAAD,CAAMC,MAAI,EAAC3E,GAAI,GAAI4E,GAAI,EAAvB,SACI,cAACvI,EAAA,EAAD,UACI,cAACkK,EAAA,EAAD,CACIZ,QAAQ,WACRrB,MAAM,YACNnE,MAAOlE,EAASiK,IAChBM,UAAU,EACVC,WAAS,EACTC,WAAY,CACRC,aACI,cAACC,EAAA,EAAD,CAAgB9G,SAAS,MAAzB,SACI,cAAC,kBAAD,CAAiB+G,KAAM5K,EAASiK,IAAKY,OAAQ,SAACD,EAAcE,GAAf,OAAmCxD,KAAhF,SACI,cAACnD,EAAA,EAAD,CACI4G,KAAK,MACL,aAAW,6BAFf,SAGI,cAAC,IAAD,iBAShC,cAACtC,EAAA,EAAD,CAAMC,MAAI,EAAC3E,GAAI,GAAI4E,GAAI,EAAvB,SACI,cAACvI,EAAA,EAAD,UACI,cAACkK,EAAA,EAAD,CACIZ,QAAQ,WACRrB,MAAM,WACNnE,MAAO0D,EACP2C,UAAU,EACVC,WAAS,EACTC,WAAY,CACRC,aACI,cAACC,EAAA,EAAD,CAAgB9G,SAAS,MAAzB,SACI,cAAC,kBAAD,CAAiB+G,KAAMhD,EAAUiD,OAAQ,SAACD,EAAcE,GAAf,OAAmCxD,KAA5E,SACI,cAACnD,EAAA,EAAD,CACI4G,KAAK,MACL,aAAW,6BAFf,SAGI,cAAC,IAAD,0BCjVrCC,UAxBU,WACrB,IAAMhE,EAAWC,cAET9E,EAAO8I,cAAP9I,GAER+I,qBAAU,WACNlE,EAASmE,YAAchJ,MACxB,CAAC6E,EAAU7E,IAEd,MAA+BiJ,aAC3B,qBAAGC,SADCC,EAAR,EAAQA,KAAMvE,EAAd,EAAcA,aAId,OACI,mCACc,OAATuE,EAAgB,KACb,cAACrL,EAAA,EAAD,CAAYC,UAAU,uBAAuBC,MAAO,IAApD,SACI,cAAC,EAAD,CAAUH,SAAUsL,EAAMvE,aAAcA,U,wSChBtDrD,EAAYN,aAAW,iBAAO,CAClCmI,KAAM,CACJhL,SAAU,IAEZiL,aAAc,CACZC,SAAU,SACVC,aAAc,WACdC,WAAY,UAEdC,WAAY,CACVC,YAAa,GACbC,aAAc,GACdC,cAAe,EACf,0BAA2B,CACzBvI,UAAW,EACXD,YAAa,QAiIJnD,IA9GyB,SAAC,GAclC,IAbLC,EAaI,EAbJA,MACAM,EAYI,EAZJA,UACAqL,EAWI,EAXJA,WACAC,EAUI,EAVJA,YACAC,EASI,EATJA,aACAC,EAQI,EARJA,OACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,OACAC,EAKI,EALJA,QAKI,IAJJC,sBAII,MAJa,OAIb,EAHJC,EAGI,EAHJA,YACAC,EAEI,EAFJA,SACGC,EACC,iBACEvJ,EAAUO,IAChB,OACE,cAAC,IAAD,yBAAK7C,QAAQ,OAAO+C,cAAc,UAAa8I,GAA/C,IAAqDC,OAAK,EAACC,MAAK,eAAOjM,GAAvE,SACE,eAAC,IAAD,WACGN,GAAS8L,EACR,cAAC,IAAD,CACE/H,UAAWjB,EAAQyI,WACnBgB,MAAK,eACAX,GAEL5L,MACE,cAAC,IAAD,CACEQ,QAAQ,OACR+C,cAAc,MACd+B,WAAW,SACX7E,eAAe,gBAJjB,SAKG+L,IAAMC,eAAezM,GACpBA,EAEA,cAAC,IAAD,CACE4D,UAAU,KACVG,UAAWjB,EAAQqI,aACnBtK,MAAM,eACN6L,UAAU,aACVvM,WAAYC,IAAMC,KAClBH,SAAU,GACVqM,MAAOZ,EAPT,SAQG3L,MAKT8L,OACEU,IAAMC,eAAeX,GACnBA,EAEA,cAAC,IAAD,CACElI,UAAU,OACV+I,GAAG,OACHhM,GAAI,EACJ8C,GAAI,EACJ8I,MAAOR,EALT,SAME,cAAC,IAAD,CACEa,KAAK,IACL/L,MAAM,YACN+C,UAAU,SACViJ,UAAU,OACV9I,UAAWjB,EAAQoI,KALrB,SAME,cAAC,IAAD,CAAKtH,UAAU,OAAf,SAAuBkI,UAM/B,KACJ,cAAC,IAAD,CACES,MAAK,yBACHf,YAAa,GACbC,aAAc,GACdlL,OAAQ,QACLsL,GAJA,IAKHiB,WAAYb,IANhB,SAQGG,IAEFJ,EACC,cAAC,IAAD,CACEO,MAAK,aACHf,YAAa,GACbC,aAAc,GACdC,cAAe,IACZS,GALP,SAOqB,kBAAXH,EACNA,EAEA,cAAC,IAAD,CACEpI,UAAU,OACV+I,GAAuB,UAAnBT,EAA6B,OAAS,EAF5C,SAGE,cAAC,IAAD,CACErL,MAAM,YACN+C,UAAU,SACViJ,UAAU,OACV9I,UAAWjB,EAAQoI,KAJrB,SAKGc,QAKP,a,iCCnJZ,2CAKM3I,EAAYN,aAAW,SAACoB,GAAD,MAAwB,CACnD4I,wBAAyB,CACvBC,UAAW,OACXC,UAAW,OACX,+GAAgH,CAC9G3B,WAAY,UAEd,4BAA6B,CAC3B9J,MAAO,OACP0L,aAAc,GACdC,UAAW,SACXrH,OAAO,aAAD,OAAesH,OAAK,MAC1B,YAAa,CACXF,aAAc,SAcPtF,IARW,SAACvB,GACzB,IAAMvD,EAAUO,IAEhB,OACE,cAAC,IAAD,CAAKU,UAAWjB,EAAQiK,wBAAxB,SAAkD1G,EAAM+F","file":"static/js/3.7317ecae.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppCard from '../../../@crema/core/AppCard';\r\nimport { Box } from '@material-ui/core';\r\nimport { Fonts } from '../../constants/AppEnums';\r\n// import {useIntl} from 'react-intl';\r\nimport AppAnimate from '../../../@crema/core/AppAnimate';\r\nimport { User } from 'types/models/User';\r\nimport { countries } from 'country-data';\r\nimport Moment from 'react-moment';\r\n\r\ninterface UserDataProps {\r\n  userData: User;\r\n}\r\n\r\nconst UserSummary: React.FC<UserDataProps> = ({ userData }) => {\r\n  // const {messages} = useIntl();\r\n  return (\r\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\r\n      <AppCard\r\n        title={\r\n          <Box fontSize={16} fontWeight={Fonts.BOLD}>\r\n            User Details\r\n          </Box>\r\n        }\r\n        rootStyle={{ height: '100%' }}\r\n      >\r\n        <Box\r\n          display='flex'\r\n          justifyContent='space-between'\r\n          fontSize={14}\r\n          fontWeight={Fonts.MEDIUM}\r\n          mt={2}\r\n          mb={4}>\r\n          <Box color='text.secondary'>User ID: </Box>\r\n          <Box>{userData.user_no}</Box>\r\n        </Box>\r\n        <Box\r\n          display='flex'\r\n          justifyContent='space-between'\r\n          fontSize={14}\r\n          fontWeight={Fonts.MEDIUM}\r\n          mb={4}>\r\n          <Box color='text.secondary'>User IP: </Box>\r\n          <Box>{userData.ip}</Box>\r\n        </Box>\r\n        <Box\r\n          display='flex'\r\n          justifyContent='space-between'\r\n          fontSize={14}\r\n          fontWeight={Fonts.MEDIUM}\r\n          mb={4}>\r\n          <Box color='text.secondary'>Country: </Box>\r\n          <Box>{countries[userData.country || ''].name}</Box>\r\n        </Box>\r\n        <Box\r\n          display='flex'\r\n          justifyContent='space-between'\r\n          fontSize={14}\r\n          fontWeight={Fonts.MEDIUM}\r\n          mb={4}>\r\n          <Box color='text.secondary'>Time: </Box>\r\n          <Box>\r\n            <Moment fromNow>{userData.createdAt}</Moment>\r\n          </Box>\r\n        </Box>\r\n      </AppCard>\r\n    </AppAnimate>\r\n  );\r\n};\r\n\r\nexport default UserSummary;\r\n","import React from 'react';\r\nimport {Area, AreaChart, ResponsiveContainer, Tooltip} from 'recharts';\r\n\r\ninterface StatGraphsProps {\r\n  data: {month: string; number: number}[];\r\n  strokeColor: string;\r\n}\r\n\r\nconst StatGraphs: React.FC<StatGraphsProps> = ({data, strokeColor}) => {\r\n  return (\r\n    <ResponsiveContainer width='100%' height={80}>\r\n      <AreaChart data={data} margin={{top: 25, right: 0, left: 0, bottom: 0}}>\r\n        <defs>\r\n          <linearGradient id='colorPv' x1='0' y1='0' x2='0' y2='1'>\r\n            <stop offset='5%' stopColor={strokeColor} stopOpacity={0.15} />\r\n            <stop offset='95%' stopColor={strokeColor} stopOpacity={0.01} />\r\n          </linearGradient>\r\n        </defs>\r\n        <Tooltip labelStyle={{color: 'black'}} />\r\n        <Area\r\n          type='monotone'\r\n          dataKey='number'\r\n          stroke={strokeColor}\r\n          strokeWidth={3}\r\n          fillOpacity={1}\r\n          fill='url(#colorPv)'\r\n        />\r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default StatGraphs;\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport { Fonts } from '../../../../shared/constants/AppEnums';\r\n// import { green, red } from '@material-ui/core/colors';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport StatGraphs from './StatGraphs';\r\nimport AppCard from '../../../../@crema/core/AppCard';\r\nimport { RevenueCards } from '../../../../types/models/Analytics';\r\n\r\ninterface StateCardProps {\r\n  data: RevenueCards;\r\n}\r\n\r\nconst StateCard: React.FC<StateCardProps> = ({ data }) => {\r\n  const useStyles = makeStyles(() => ({\r\n    icon: {\r\n      height: 50,\r\n      width: 50,\r\n      marginLeft: 'auto',\r\n      marginRight: -20,\r\n      marginTop: -12,\r\n    },\r\n    statGraphs: {\r\n      margin: '0 -24px -20px',\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppCard>\r\n      <Box display='flex' flex={1} flexDirection='column'>\r\n        <Box display='flex' flex={1} flexDirection='row'>\r\n          <Box position='relative' mr={{ xs: 3, xl: 6 }}>\r\n            <Box mb={1}>\r\n              <Box\r\n                component='h3'\r\n                display='inline-block'\r\n                fontWeight={Fonts.BOLD}\r\n                fontSize={20}>\r\n                {data.value}\r\n              </Box>\r\n              {/* <Box\r\n                component='span'\r\n                ml={3}\r\n                fontSize={16}\r\n                fontWeight={Fonts.MEDIUM}\r\n                color={data.growth > 0.0 ? green[500] : red[500]}>\r\n                {data.growth}%\r\n              </Box> */}\r\n            </Box>\r\n            <Box component='p' fontSize={14} color='text.secondary' mb={1}>\r\n              {data.type}\r\n            </Box>\r\n          </Box>\r\n          <IconButton className={classes.icon}>\r\n            <img alt='icon' src={data.icon} />\r\n          </IconButton>\r\n        </Box>\r\n        <Box className={classes.statGraphs}>\r\n          <StatGraphs data={data.graphData} strokeColor={data.strokeColor} />\r\n        </Box>\r\n      </Box>\r\n    </AppCard>\r\n  );\r\n};\r\n\r\nexport default StateCard;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport AppTableContainer from '../../../@crema/core/AppTableContainer';\r\nimport StepConnector from '@material-ui/core/StepConnector';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport VideoLabelIcon from '@material-ui/icons/VideoLabel';\r\nimport { User } from '../../../types/models/User';\r\nimport clsx from 'clsx';\r\nimport UserSummary from 'shared/components/UserSummary';\r\nimport { Fonts } from '../../constants/AppEnums';\r\nimport { GridContainer } from '@crema';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Grid,\r\n    IconButton,\r\n    InputAdornment,\r\n    // Snackbar,\r\n    // SnackbarContent,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport AppCard from '@crema/core/AppCard';\r\nimport { onBlockUser, onSetPin } from 'redux/actions/Users';\r\nimport { CremaTheme } from 'types/AppContextPropsType';\r\nimport getSymbolFromCurrency from 'currency-symbol-map'\r\nimport StateCard from './StateCards';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\n\r\nimport ReactNotification, { store } from 'react-notifications-component'\r\nimport 'react-notifications-component/dist/theme.css'\r\n\r\ninterface UserDataProps {\r\n    userData: User;\r\n    clientDomain: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n    statsCard: {\r\n        borderRadius: theme.overrides.MuiCardLg.root.borderRadius,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(5),\r\n    },\r\n    inputs: {\r\n        width: '100%',\r\n    },\r\n    table: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    row: {\r\n        display: 'flex'\r\n    },\r\n    col: {\r\n        flex: '1 1 auto',\r\n        flexBasis: '25%',\r\n        textAlign: 'center',\r\n        lineHeight: '348%',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        flex: 1,\r\n    },\r\n    buttons: {\r\n        flex: 1,\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    }\r\n}));\r\n\r\nconst ColorlibConnector = withStyles({\r\n    alternativeLabel: {\r\n        top: 22,\r\n    },\r\n    active: {\r\n        '& $line': {\r\n            backgroundImage:\r\n                'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\r\n        },\r\n    },\r\n    completed: {\r\n        '& $line': {\r\n            backgroundImage:\r\n                'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\r\n        },\r\n    },\r\n    line: {\r\n        height: 3,\r\n        border: 0,\r\n        backgroundColor: '#eaeaf0',\r\n        borderRadius: 1,\r\n    },\r\n})(StepConnector);\r\n\r\nconst useColorlibStepIconStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: '#ccc',\r\n        zIndex: 1,\r\n        color: '#fff',\r\n        width: 50,\r\n        height: 50,\r\n        display: 'flex',\r\n        borderRadius: '50%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    active: {\r\n        backgroundImage:\r\n            'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\r\n        boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n    },\r\n    completed: {\r\n        backgroundImage:\r\n            'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\r\n    },\r\n});\r\n\r\nfunction ColorlibStepIcon(props: any) {\r\n    const classes = useColorlibStepIconStyles();\r\n    const { active, completed } = props;\r\n    const icons = {\r\n        1: <SettingsIcon />,\r\n        2: <GroupAddIcon />,\r\n        3: <VideoLabelIcon />,\r\n        4: <VideoLabelIcon />,\r\n    };\r\n    return (\r\n        <div\r\n            className={clsx(classes.root, {\r\n                [classes.active]: active,\r\n                [classes.completed]: completed,\r\n            })}>\r\n            {props.icon === 1 || props.icon === undefined ? icons[1] : (props.icon === 2 ? icons[2] : props.icon === 3 ? icons[3] : icons[4])}\r\n        </div>\r\n    );\r\n}\r\nfunction getSteps() {\r\n    return ['Login Page', 'Password Page', 'Dashboard', 'Logout'];\r\n}\r\n\r\nconst UserView: React.FC<UserDataProps> = ({ userData, clientDomain }) => {\r\n    // const [openCopiedSnackbar, setOpenCopiedSnackbar] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const activeStep = parseInt(userData.status || '0');\r\n    const steps = getSteps();\r\n\r\n    const openDashboard = () => {\r\n        let password = '';\r\n        try {\r\n            password = atob(userData.password);\r\n        } catch (e) {\r\n\r\n        }\r\n        window.open(clientDomain + '?uid=' + userData.uid + '&pws=' + password);\r\n    }\r\n\r\n    const setBlock = () => {\r\n        dispatch(onBlockUser(userData.uid, !userData.blocked))\r\n        return store.addNotification({\r\n            title: \"\",\r\n            message: \"Successfully Blocked\",\r\n            container: 'top-right',\r\n            type: 'danger',\r\n        });\r\n    }\r\n\r\n    const setPin = () => {\r\n        dispatch(onSetPin(userData.uid))\r\n        return store.addNotification({\r\n            title: \"\",\r\n            message: \"Successfully Pinned\",\r\n            container: 'top-right',\r\n            type: 'info',\r\n        });\r\n    }\r\n\r\n    const getLocalBalance = () => {\r\n        try {\r\n            const balance = JSON.parse(userData.balance);\r\n            if (balance.wallet) {\r\n                return getSymbolFromCurrency(balance.info.symbol_local.code) + ' ' + (balance.wallet.final_balance / balance.info.symbol_local.conversion).toFixed(3);\r\n            }\r\n        } catch (e) {\r\n            return '0';\r\n        }\r\n    }\r\n\r\n    // const getBtcBalance = () => {\r\n    //     try {\r\n    //         const balance = JSON.parse(userData.balance);\r\n    //         if (balance.wallet) {\r\n    //             return (balance.wallet.final_balance / balance.info.symbol_btc.conversion) + ' ' + balance.info.symbol_btc.code;\r\n    //         }\r\n    //     } catch (e) {\r\n    //         return 0;\r\n    //     }\r\n    // }\r\n\r\n    const onCopyHandler = (_text: string, _result: boolean) => {\r\n        // setOpenCopiedSnackbar(true);\r\n        return store.addNotification({\r\n            title: \"\",\r\n            message: \"Successfully Copied\",\r\n            container: 'top-right',\r\n            type: 'success',\r\n        });\r\n    }\r\n\r\n    // const onCloseSnackbarHandler = (_event: any, _reason: any) => {\r\n    //     setOpenCopiedSnackbar(false);\r\n    // }\r\n\r\n    let password = '';\r\n    try {\r\n        password = atob(userData.password)\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n    return (\r\n        <AppTableContainer>\r\n            <ReactNotification />\r\n            <Box className={classes.margin}>\r\n                <Stepper\r\n                    alternativeLabel\r\n                    activeStep={activeStep}\r\n                    connector={<ColorlibConnector />}>\r\n                    {steps.map((label) => (\r\n                        <Step key={label}>\r\n                            <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>\r\n                        </Step>\r\n                    ))}\r\n                </Stepper>\r\n            </Box>\r\n            <Box className={classes.margin}>\r\n                {\r\n                    userData === null ? <></> :\r\n                        <>\r\n                            <GridContainer>\r\n                                <Grid item xs={12} md={4}>\r\n                                    <UserSummary userData={userData}></UserSummary>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={4}>\r\n                                    <StateCard data={\r\n                                        {\r\n                                            id: 1,\r\n                                            type: 'TOTAL BALANCE',\r\n                                            value: getLocalBalance() || '0',\r\n                                            growth: 0,\r\n                                            icon: '/assets/images/icon-blood.png',\r\n                                            strokeColor: '',\r\n                                            graphData: []\r\n                                        }\r\n                                    } />\r\n                                    <AppCard>\r\n                                        <Box display='flex' flex={1} flexDirection='column'>\r\n                                            <Box display='flex' flex={1} flexDirection='row'>\r\n                                                <Box position='relative' mr={{ xs: 3, xl: 6 }}>\r\n                                                    <Box mb={1}>\r\n                                                        <Box\r\n                                                            component='h3'\r\n                                                            display='inline-block'\r\n                                                            fontWeight={Fonts.BOLD}\r\n                                                            fontSize={20}>\r\n                                                            STATUS\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            <Box>\r\n                                                <Button variant='outlined' color='secondary'>\r\n                                                    {userData.isOffline ? 'OFFLINE' : 'ONLINE'}\r\n                                                </Button>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </AppCard>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={4}>\r\n                                    <Box className={classes.margin}>\r\n                                        <Box>\r\n                                            <Fab\r\n                                                variant='extended'\r\n                                                size='medium'\r\n                                                color='primary'\r\n                                                aria-label='add'\r\n                                                className={classes.margin}\r\n                                                onClick={(e) => openDashboard()}\r\n                                            >\r\n                                                OPEN DASHBOARD\r\n                                            </Fab>\r\n                                            <Fab\r\n                                                variant='extended'\r\n                                                size='medium'\r\n                                                color='primary'\r\n                                                aria-label='add'\r\n                                                className={classes.margin}\r\n                                                onClick={(e) => setPin()}\r\n                                            >\r\n                                                PIN USER\r\n                                            </Fab>\r\n                                            <Fab\r\n                                                variant='extended'\r\n                                                size='medium'\r\n                                                color='primary'\r\n                                                aria-label='add'\r\n                                                className={classes.margin}\r\n                                                onClick={() => setBlock()}\r\n                                            >\r\n                                                BLOCK\r\n                                            </Fab>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </GridContainer>\r\n                        </>\r\n                }\r\n            </Box>\r\n            <Box className={classes.margin}>\r\n                <GridContainer>\r\n                    <Grid item xs={12} md={6}>\r\n                        <AppCard>\r\n                            <TextField\r\n                                variant='outlined'\r\n                                label='WALLET ID'\r\n                                value={userData.uid}\r\n                                disabled={true}\r\n                                fullWidth\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            <CopyToClipboard text={userData.uid} onCopy={(text: string, result: boolean) => onCopyHandler(text, result)}>\r\n                                                <IconButton\r\n                                                    edge='end'\r\n                                                    aria-label='toggle password visibility'>\r\n                                                    <FileCopy />\r\n                                                </IconButton>\r\n                                            </CopyToClipboard>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </AppCard>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <AppCard>\r\n                            <TextField\r\n                                variant='outlined'\r\n                                label='PASSWORD'\r\n                                value={password}\r\n                                disabled={true}\r\n                                fullWidth\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            <CopyToClipboard text={password} onCopy={(text: string, result: boolean) => onCopyHandler(text, result)}>\r\n                                                <IconButton\r\n                                                    edge='end'\r\n                                                    aria-label='toggle password visibility'>\r\n                                                    <FileCopy />\r\n                                                </IconButton>\r\n                                            </CopyToClipboard>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </AppCard>\r\n                    </Grid>\r\n                </GridContainer>\r\n            </Box>\r\n            {/* <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n                open={openCopiedSnackbar}\r\n                autoHideDuration={6000}\r\n                onClose={onCloseSnackbarHandler}>\r\n                <SnackbarContent\r\n                    className='success'\r\n                    aria-describedby='client-snackbar'\r\n                    message={\r\n                        <span id='client-snackbar' className={classes.message}>\r\n                            Successfully Copied\r\n                        </span>\r\n                    }\r\n                />\r\n            </Snackbar> */}\r\n        </AppTableContainer>\r\n    );\r\n};\r\n\r\nexport default UserView;\r\n","import React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { onGetUserData } from '../../redux/actions';\r\nimport AppAnimate from '../../@crema/core/AppAnimate';\r\nimport { AppState } from '../../redux/store';\r\nimport UserView from 'shared/components/UserView';\r\n\r\nconst UserControlPanel = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        dispatch(onGetUserData(id));\r\n    }, [dispatch, id]);\r\n\r\n    const { user, clientDomain } = useSelector<AppState, AppState['users']>(\r\n        ({ users }) => users,\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {user === null ? null :\r\n                <AppAnimate animation='transition.slideUpIn' delay={200}>\r\n                    <UserView userData={user} clientDomain={clientDomain} />\r\n                </AppAnimate>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserControlPanel;\r\n","import React, { CSSProperties, ReactNode } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport { Box, CardHeader, makeStyles } from '@material-ui/core';\r\nimport { Fonts } from '../../../shared/constants/AppEnums';\r\nimport { MessageFormatElement } from 'intl-messageformat-parser';\r\nimport Link from '@material-ui/core/Link';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  link: {\r\n    fontSize: 14,\r\n  },\r\n  textTruncate: {\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  cardHeader: {\r\n    paddingLeft: 20,\r\n    paddingRight: 20,\r\n    paddingBottom: 4,\r\n    '& .MuiCardHeader-action': {\r\n      marginTop: 0,\r\n      marginRight: 0,\r\n    },\r\n  },\r\n}));\r\n\r\ninterface AppCardProps {\r\n  title?: string | MessageFormatElement[] | ReactNode;\r\n  rootStyle?: CSSProperties;\r\n  titleStyle?: CSSProperties;\r\n  action?: ReactNode | string | MessageFormatElement[];\r\n  actionStyle?: CSSProperties;\r\n  footer?: ReactNode | string;\r\n  footerPosition?: string;\r\n  footerStyle?: CSSProperties;\r\n  children: ReactNode;\r\n  bgcolor?: any;\r\n  [x: string]: any;\r\n}\r\n\r\nconst AppCard: React.FC<AppCardProps> = ({\r\n  title,\r\n  rootStyle,\r\n  titleStyle,\r\n  headerStyle,\r\n  contentStyle,\r\n  action,\r\n  actionStyle,\r\n  footer,\r\n  bgcolor,\r\n  footerPosition = 'left',\r\n  footerStyle,\r\n  children,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box display='flex' flexDirection='column' {...rest} clone style={{ ...rootStyle }}>\r\n      <Card>\r\n        {title || action ? (\r\n          <CardHeader\r\n            className={classes.cardHeader}\r\n            style={{\r\n              ...headerStyle,\r\n            }}\r\n            title={\r\n              <Box\r\n                display='flex'\r\n                flexDirection='row'\r\n                alignItems='center'\r\n                justifyContent='space-between'>\r\n                {React.isValidElement(title) ? (\r\n                  title\r\n                ) : (\r\n                  <Box\r\n                    component='h3'\r\n                    className={classes.textTruncate}\r\n                    color='text.primary'\r\n                    alignSelf='flex-start'\r\n                    fontWeight={Fonts.BOLD}\r\n                    fontSize={16}\r\n                    style={titleStyle}>\r\n                    {title}\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            }\r\n            action={\r\n              React.isValidElement(action) ? (\r\n                action\r\n              ) : (\r\n                <Box\r\n                  component='span'\r\n                  ml='auto'\r\n                  mt={2}\r\n                  mr={2}\r\n                  style={actionStyle}>\r\n                  <Link\r\n                    href='#'\r\n                    color='secondary'\r\n                    component='button'\r\n                    underline='none'\r\n                    className={classes.link}>\r\n                    <Box component='span'>{action}</Box>\r\n                  </Link>\r\n                </Box>\r\n              )\r\n            }\r\n          />\r\n        ) : null}\r\n        <CardContent\r\n          style={{\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            height: '100%',\r\n            ...contentStyle,\r\n            background: bgcolor\r\n          }}>\r\n          {children}\r\n        </CardContent>\r\n        {footer ? (\r\n          <CardActions\r\n            style={{\r\n              paddingLeft: 20,\r\n              paddingRight: 20,\r\n              paddingBottom: 16,\r\n              ...footerStyle,\r\n            }}>\r\n            {typeof footer === 'object' ? (\r\n              footer\r\n            ) : (\r\n              <Box\r\n                component='span'\r\n                ml={footerPosition === 'right' ? 'auto' : 0}>\r\n                <Link\r\n                  color='secondary'\r\n                  component='button'\r\n                  underline='none'\r\n                  className={classes.link}>\r\n                  {footer}\r\n                </Link>\r\n              </Box>\r\n            )}\r\n          </CardActions>\r\n        ) : null}\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AppCard;\r\n","import React from 'react';\r\nimport {Box, makeStyles} from '@material-ui/core';\r\nimport {grey} from '@material-ui/core/colors/index';\r\nimport {CremaTheme} from '../../../types/AppContextPropsType';\r\n\r\nconst useStyles = makeStyles((theme: CremaTheme) => ({\r\n  tableResponsiveMaterial: {\r\n    minHeight: '.01%',\r\n    overflowX: 'auto',\r\n    '& > thead > tr > th, > tbody > tr > th, > tfoot > tr > th, thead > tr > td, tbody > tr > td, tfoot > tr > td': {\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    '@media (max-width: 767px)': {\r\n      width: '100%',\r\n      marginBottom: 15,\r\n      overflowY: 'hidden',\r\n      border: `1px solid ${grey[300]}`,\r\n      '& > table': {\r\n        marginBottom: 0,\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst AppTableContainer = (props: any) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={classes.tableResponsiveMaterial}>{props.children}</Box>\r\n  );\r\n};\r\n\r\nexport default AppTableContainer;\r\n"],"sourceRoot":""}